<schema package="org.matahariproject">
    <class name="Config">
        <method name="init" desc="Handle must be obtained before using any other method">
            <arg name="lens" dir="I" type="sstr" />
            <arg name="handle" dir="O" type="int32" />
        </method>

        <method name="get" desc="Get value of the node associated with PATH">
            <arg name="handle" dir="I" type="int32" />
            <arg name="path" dir="I" type="sstr" />
            <arg name="value" dir="O" type="sstr" />
            <arg name="result" dir="O" type="int8" />
        </method>
        
        <method name="set" desc="Associate VALUE with PATH. If PATH is not in the tree yet, it and all its ancestors will be created. These new tree entries will appear last amongst their siblings">
            <arg name="handle" dir="I" type="int32" />
            <arg name="path" dir="I" type="sstr" />
            <arg name="value" dir="I" type="sstr" />
            <arg name="result" dir="O" type="int8" />
        </method>

        <method name="setm" desc="Set multiple nodes in one operation. Find or create a node matching SUB by interpreting SUB as a  path expression relative to each node matching BASE. If SUB is '.', the nodes matching BASE will be modified.">
            <arg name="handle" dir="I" type="int32" />
            <arg name="base" dir="I" type="sstr" />
            <arg name="sub" dir="I" type="sstr" />
            <arg name="value" dir="I" type="sstr" />
            <arg name="result" dir="O" type="int8" />
        </method>

        <method name="insert" desc="Insert a new node with label LABEL right before or after PATH into the tree. WHERE must be either 'before' or 'after'.">
            <arg name="handle" dir="I" type="int32" />
            <arg name="path" dir="I" type="sstr" />
            <arg name="label" dir="I" type="sstr" />
            <arg name="before" dir="I" type="int8" />
            <arg name="result" dir="O" type="int8" />
        </method>

        <method name="mv" desc="Move node SRC to DST. SRC must match exactly one node in the tree. DST must either match exactly one node in the tree, or may not exist  yet. If DST exists already, it and all its  descendants are deleted. If DST does not exist yet, it and all its missing ancestors are created.">
            <arg name="handle" dir="I" type="int32" />
            <arg name="src" dir="I" type="sstr" />
            <arg name="dst" dir="I" type="sstr" />
            <arg name="result" dir="O" type="int8" />
        </method>

        <method name="rm" desc="Delete PATH and all its children from the tree">
            <arg name="handle" dir="I" type="int32" />
            <arg name="path" dir="I" type="sstr" />
            <arg name="result" dir="O" type="int8" />
        </method>

        <method name="match" desc="Find all paths that match the path expression PATH. If VALUE is given, only the matching paths whose value equals VALUE are printed">
            <arg name="handle" dir="I" type="int32" />
            <arg name="path" dir="I" type="sstr" />
            <arg name="matches" dir="O" type="list" />
            <arg name="result" dir="O" type="int8" />
        </method>

        <method name="save" desc="Save all pending changes to disk.">
            <arg name="handle" dir="I" type="int32" />
            <arg name="result" dir="O" type="int8" />
        </method>
        
        <method name="error" desc="Get the error code from last augeas call.">
            <arg name="handle" dir="I" type="int32" />
            <arg name="code" dir="O" type="int8" />
        </method>
        
        <method name="error_verbose" desc="Get error in human readable form">
            <arg name="handle" dir="I" type="int32" />
            <arg name="message" dir="O" type="sstr" />
            <arg name="minor_message" dir="O" type="sstr" />
            <arg name="details" dir="O" type="sstr" />
        </method>

        <method name="close" desc="Throws away nonsaved changes and frees up memory">
            <arg name="handle" dir="I" type="int32" />
        </method>
    </class>
</schema>
